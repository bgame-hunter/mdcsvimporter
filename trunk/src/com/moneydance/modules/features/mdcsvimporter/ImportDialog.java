/*
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.moneydance.modules.features.mdcsvimporter;

import com.moneydance.apps.md.model.Account;
import com.moneydance.apps.md.model.RootAccount;
import java.awt.Color;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileFilter;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author miki
 */
public class ImportDialog
   extends javax.swing.JDialog
{
   private File selectedFile;
   private TransactionReader transactionReader;
   private Main main;

   public ImportDialog( java.awt.Frame parent, Main main )
   {
      super( parent, true );
      initComponents();

      textFilename.getDocument().addDocumentListener( new DocumentListener()
      {
         public void insertUpdate( DocumentEvent e )
         {
            textFilenameChanged();
         }

         public void removeUpdate( DocumentEvent e )
         {
            textFilenameChanged();
         }

         public void changedUpdate( DocumentEvent e )
         {
            textFilenameChanged();
         }
      } );

      this.main = main;
      RootAccount rootAccount = main.getRootAccount();
      comboAccount.removeAllItems();
      for ( int i = 0; i < rootAccount.getSubAccountCount(); ++i )
      {
         Account account = rootAccount.getSubAccount( i );
         comboAccount.addItem( account );
      }
      if ( comboAccount.getItemCount() > 0 )
      {
         comboAccount.setSelectedIndex( 0 );
      }

      checkDeleteFile.setSelected( Settings.getBoolean( "delete.file" ) );

      updateActions();
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jLabel3 = new javax.swing.JLabel();
      jLabel1 = new javax.swing.JLabel();
      textFilename = new javax.swing.JTextField();
      btnBrowse = new javax.swing.JButton();
      checkDeleteFile = new javax.swing.JCheckBox();
      btnClose = new javax.swing.JButton();
      btnProcess = new javax.swing.JButton();
      jLabel2 = new javax.swing.JLabel();
      comboAccount = new javax.swing.JComboBox();
      lblMessage = new javax.swing.JLabel();

      jLabel3.setText("jLabel3");

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle("Import CSV File");
      setName("importDialog"); // NOI18N
      setResizable(false);

      jLabel1.setText("Select File:");

      btnBrowse.setText("...");
      btnBrowse.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnBrowseActionPerformed(evt);
         }
      });

      checkDeleteFile.setText("Securely erase file after processing.");
      checkDeleteFile.setToolTipText("If checked, the specified file will be securely erased (first overwritten, then deleted) after successful processing.");

      btnClose.setText("Close");
      btnClose.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnCloseActionPerformed(evt);
         }
      });

      btnProcess.setText("Process");
      btnProcess.setEnabled(false);
      btnProcess.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnProcessActionPerformed(evt);
         }
      });

      jLabel2.setText("Select Account:");

      comboAccount.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

      lblMessage.setForeground(new java.awt.Color(255, 0, 51));
      lblMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      lblMessage.setText("jLabel4");
      lblMessage.setOpaque(true);

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(layout.createSequentialGroup()
                  .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .add(36, 36, 36)
                        .add(textFilename, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnBrowse, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                     .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(btnProcess)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(btnClose)))
                  .addContainerGap())
               .add(layout.createSequentialGroup()
                  .add(jLabel2)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(comboAccount, 0, 284, Short.MAX_VALUE)
                  .add(52, 52, 52))
               .add(layout.createSequentialGroup()
                  .add(checkDeleteFile)
                  .addContainerGap(184, Short.MAX_VALUE))
               .add(layout.createSequentialGroup()
                  .add(lblMessage, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
                  .addContainerGap())))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(jLabel1)
               .add(textFilename, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
               .add(btnBrowse))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(jLabel2)
               .add(comboAccount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(checkDeleteFile, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(lblMessage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 21, Short.MAX_VALUE)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(btnClose)
               .add(btnProcess))
            .addContainerGap())
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnBrowseActionPerformed
    {//GEN-HEADEREND:event_btnBrowseActionPerformed
       JFileChooser dialog = new JFileChooser();
       dialog.setFileHidingEnabled( true );
       dialog.setDialogTitle( "Select text file" );
       dialog.setCurrentDirectory(
          new File( Settings.get( "last.directory",
          dialog.getCurrentDirectory().getAbsolutePath() ) ) );
       dialog.addChoosableFileFilter( new FileFilter()
       {
          @Override
          public boolean accept( File f )
          {
             return f.isDirectory() || f.getName().endsWith( ".csv" );
          }

          @Override
          public String getDescription()
          {
             return "Formatted Text File (*.csv)";
          }
       } );
       if ( dialog.showDialog( this, "Select" ) == JFileChooser.APPROVE_OPTION )
       {
          selectedFile = dialog.getSelectedFile();
          Settings.set( "last.directory", dialog.getCurrentDirectory().getAbsolutePath() );
          textFilename.setText( selectedFile.getPath() );
          updateActions();
       }
}//GEN-LAST:event_btnBrowseActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnCloseActionPerformed
    {//GEN-HEADEREND:event_btnCloseActionPerformed
       this.setVisible( false );
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnProcessActionPerformed
    {//GEN-HEADEREND:event_btnProcessActionPerformed
       CSVReader csvReader = null;
       try
       {
          csvReader = new CSVReader( new FileReader( selectedFile ) );
          transactionReader.parse( csvReader, (Account) comboAccount.getSelectedItem() );
          csvReader.close();
       }
       catch ( IOException x )
       {
          try
          {
             csvReader.close();
          }
          catch ( Exception ex )
          {
          }
          JOptionPane.showMessageDialog( rootPane, "Error reading from the file.",
             "Error Reading File", JOptionPane.ERROR_MESSAGE );
          return;
       }

       Settings.setYesNo( "delete.file", checkDeleteFile.isSelected() );
       if ( checkDeleteFile.isSelected() )
       {
          try
          {
             SecureFileDeleter.delete( selectedFile );
          }
          catch ( IOException x )
          {
             JOptionPane.showMessageDialog( rootPane, "The file was imported properly, " +
                "however it could not be erased as requested.", "Cannot Delete File",
                JOptionPane.ERROR_MESSAGE );
             return;
          }
       }

       if ( !Settings.getBoolean( "success.dialog.shown", false ) )
       {
          Settings.setYesNo( "success.dialog.shown", true );
          JOptionPane.showMessageDialog( rootPane, 
             "The file was imported properly. \n\n" +
             "You can view the imported items when you open the account you have \n" +
             "selected and click on the 'downloaded transactions' message at the \n" +
             "bottom of the screen.",
             "Import Successful", JOptionPane.INFORMATION_MESSAGE );
       }

       setVisible( false );
    }//GEN-LAST:event_btnProcessActionPerformed
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton btnBrowse;
   private javax.swing.JButton btnClose;
   private javax.swing.JButton btnProcess;
   private javax.swing.JCheckBox checkDeleteFile;
   private javax.swing.JComboBox comboAccount;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel lblMessage;
   private javax.swing.JTextField textFilename;
   // End of variables declaration//GEN-END:variables

   protected void updateActions()
   {
      boolean enabled = true;
      String message = null;
      CSVReader csvReader = null;

      try
      {
         // see if the file is selected
         if ( selectedFile == null || !selectedFile.exists() || !selectedFile.isFile() )
         {
            enabled = false;
            message = "Please select a valid file.";
         }

         if ( enabled )
         {
            try
            {
               csvReader = new CSVReader( new FileReader( selectedFile ) );
            }
            catch ( Throwable x )
            {
               enabled = false;
               message = "Cannot open file.";
               Logger.getLogger( ImportDialog.class.getName() ).log( Level.SEVERE, null, x );
            }
         }

         // detect file format
         if ( enabled )
         {
            try
            {
               transactionReader = TransactionReader.create( csvReader );
               if ( transactionReader == null )
               {
                  enabled = false;
                  message = "CSV files in this format are not supported.";
               }
            }
            catch ( Throwable x )
            {
               enabled = false;
               message = "Error reading file.";
               Logger.getLogger( ImportDialog.class.getName() ).log( Level.SEVERE, null, x );
            }
         }

         Account account = (Account) comboAccount.getSelectedItem();
         if ( account == null )
         {
            enabled = false;
         }
      }
      finally
      {
         try
         {
            if ( csvReader != null )
            {
               csvReader.close();
            }
         }
         catch ( Throwable x )
         {
         }
      }

      btnProcess.setEnabled( enabled );
      if ( message != null )
      {
         lblMessage.setText( message );
         lblMessage.setForeground( new Color( 255, 0, 51 ) );
      }
      else
      {
         lblMessage.setText( "File from " + transactionReader.getFormatName() + "." );
         lblMessage.setForeground( Color.BLACK );
      }
   }

   private void textFilenameChanged()
   {
      File newFile = new File( textFilename.getText() );

      if ( !newFile.equals( selectedFile ) )
      {
         selectedFile = newFile;
         updateActions();
      }
   }
}
